# vim:fileencoding=UTF-8:ts=4:sw=4:sta:et:sts=4:ai
from calibre.web.feeds.news import BasicNewsRecipe
import re
from calibre.utils.magick import Image
from BeautifulSoup import BeautifulSoup

''' Version 1.2, updated cover image to match the changed website.
 added info date on title
 version 1.4 Updated tags, delay and added autoclean 22-09-2011
 version 1.5 Changes due to changes in site
 version 1.6 Added css, removed auto cleanup, added buitenland section, added use_embedded_content, added remove_attributes
    Added some processing on pictures
    Removed links in html
    Removed extre white characters
    changed handling of self closing span
 Version 1.7 11-11-2011 Changed oldest_article back to 1.5
    changed Ã¨ into &egrave;
    updated remove tags
    removed keep_only tags
 Version 1.8 26-11-2022
   added remove tag: article-slideshow
 Version 1.9 31-1-2012
   removed some left debug settings
      extended timeout from 2 to 10
      changed oldest article from 10 to 1.2
      changed max articles from 15 to 25
 Version 1.9.1 18-04-2012
    removed some debug settings
    updated code to match new metro-layout
 Version 1.9.2 14-04-2012
    updated code to match new metro-layout
'''

class AdvancedUserRecipe1306097511(BasicNewsRecipe):
    title = u'Metro Nieuws NL'
    oldest_article = 1.2
    max_articles_per_feed = 25
    __author__     = u'DrMerry'
    description    = u'Metro Nederland'
    language       = u'nl'
    simultaneous_downloads = 3
    masthead_url = 'http://blog.metronieuws.nl/wp-content/themes/metro/images/header.gif'
    timeout = 10
    center_navbar  = True
    timefmt        = ' [%A, %d %b %Y]'
    no_stylesheets = True
    remove_javascript = True
    remove_empty_feeds = True
    cover_url      = 'http://www.oldreadmetro.com/img/en/metroholland/last/1/small.jpg'
    publication_type = 'newspaper'
    encoding              = 'utf-8'
    remove_attributes = ['style', 'font', 'width', 'height']
    use_embedded_content = False
    conversion_options = {
        'authors'        : 'Metro Nederland & calibre & DrMerry',
        'author_sort'    : 'Metro Nederland & calibre & DrMerry',
        'publisher'      : 'DrMerry/Metro Nederland'
    }
    extra_css = 'body {padding:5px 0; background-color:#fff;font-size: 1em}\
        #date, div.share-and-byline div.byline div.text div.title, div.share-and-byline div.byline div.text div.name {margin-bottom: 10px}\
        #date, div.share-and-byline div.byline div.text div.title, div.share-and-byline div.byline div.text div.name, p.article-image-caption .credits {font-size:0.5em}\
        .article-box-fact.module-title, #date, div.share-and-byline div.byline div.text div.title, div.share-and-byline div.byline div.text div.name {clear:both}\
        .article-box-fact.module-title {padding: 8px 0}\
        h1.title {color: #000;font-size: 1.4em}\
        .article-box-fact.module-title, h2.subtitle {font-size: 1.2em}\
        h1.title, h2.subtitle, .article-body p{padding-bottom:10px}\
        h1.title, p.article-image-caption {font-weight: 300}\
        div.column-1-3{margin-left: 19px;padding-right: 9px}\
        div.column-1-2 {display: inline;padding-right: 7px}\
        p.article-image-caption {font-size: 0.6em;margin-top: 5px}\
        p.article-image-caption, #date, div.share-and-byline div.byline div.text div.title, div.share-and-byline div.byline div.text div.name {color: #616262}\
        p.article-image-caption .credits {font-style: italic}\
        div.article-image-caption {width: 246px;margin: 5px}\
        div.article-image-caption-2column {width: 373px}\
        div.article-image-caption-2column, div.article-image-caption-3column {margin-bottom: 5px}\
        img {border:0}\
        img, div.column-3 {padding:2px}\
        hr.merryhr {width:30%;  border-width:0; margin-left:5px; background-color: #24763b}\
        div.column-3 {background-color:#eee; width:50%; margin:2px; float:right}\
        div.column-3 module-title {border: 1px solid #aaa}\
        div.article-box-fact div.subtitle, .article-box-fact.module-title, h2.subtitle {font-weight:bold}\
        div.article-box-fact div.subtitle, hr.merryhr, .article-box-fact.module-title {color: #24763b}'


    preprocess_regexps = [
        (re.compile(r'<img[^>]+top-line[^>]+>', re.DOTALL|re.IGNORECASE),
        lambda match: '<hr class="merryhr" />'),
        (re.compile(r'<img[^>]+(metronieuws\.nl/[^>]+/templates/[^>]+jpe?g|metronieuws\.nl/internal\-roxen\-unit\.gif)[^>]+>', re.DOTALL|re.IGNORECASE),
        lambda match: ''),
        ]

    def preprocess_html(self, soup):
        myProcess = MerryProcess()
        myProcess.removeUnwantedTags(soup)
        return soup

    def postprocess_html(self, soup, first):
        myProcess = MerryProcess()
        myProcess.optimizeLayout(soup)
        return soup

    feeds = [
        (u'Binnenland', u'http://www.metronieuws.nl/rss.xml?c=1277377288-3'),
        (u'Economie', u'http://www.metronieuws.nl/rss.xml?c=1278070988-0'),
        (u'Den Haag', u'http://www.metronieuws.nl/rss.xml?c=1289013337-3'),
        (u'Rotterdam', u'http://www.metronieuws.nl/rss.xml?c=1289013337-2'),
        (u'Amsterdam', u'http://www.metronieuws.nl/rss.xml?c=1289013337-1'),
        (u'Buitenland', u'http://www.metronieuws.nl/rss.xml?c=1277377288-4'),
        (u'Columns', u'http://www.metronieuws.nl/rss.xml?c=1277377288-17'),
        (u'Entertainment', u'http://www.metronieuws.nl/rss.xml?c=1277377288-2'),
        (u'Dot', u'http://www.metronieuws.nl/rss.xml?c=1283166782-12'),
        (u'Familie', u'http://www.metronieuws.nl/rss.xml?c=1283166782-9'),
        (u'Blogs', u'http://www.metronieuws.nl/rss.xml?c=1295586825-6'),
        (u'Reizen', u'http://www.metronieuws.nl/rss.xml?c=1277377288-13'),
        (u'Carri&egrave;re', u'http://www.metronieuws.nl/rss.xml?c=1278070988-1'),
        (u'Sport', u'http://www.metronieuws.nl/rss.xml?c=1277377288-12')
        ]

class MerryPreProcess():
    def replacePictures(self, soup):
        #to be implemented
        return soup

    def optimizePicture(self,soup):
        for tag in soup.findAll(lambda tag: tag.name.lower()=='img' and tag.has_key('src')):
            iurl = tag['src']
            img = Image()
            img.open(iurl)
            img.trim(0)
            img.save(iurl)
        return soup

class MerryExtract():
    def safeRemovePart(self, killingSoup, soupIsArray):
        if killingSoup and not killingSoup == None:
            try:
                if soupIsArray == True:
                    for killer in killingSoup:
                        killer.extract()
                else:
                    killingSoup.extract()
            except:
                return False
        else:
            return False
        return killingSoup

class MerryReplace():
    myKiller = MerryExtract()
    def replaceATag(self, soup):
        anchors = []
        anchors = soup.findAll('a')
        if anchors and not (anchors == None or anchors == []):
          try:
            for link in anchors:
                # print str(link)
                if link and not link == None:
                    # print ('type: %s'%(str(type(link))))
                    # print ('link: %s' % (link))
                    myParent = link.parent
                    # print str('parent: %s'%(myParent))
                    try:
                        myIndex = link.parent.index(link)
                        hasIndex = True
                    except:
                        myIndex = 0
                        hasIndex = False
                    # print str('index %s'%(myIndex))
                    if not link.string == None:
                        # print 'link=notnone'
                        if hasIndex == True:
                            myParent.insert(myIndex, link.string)
                        else:
                            myParent.append(link.string)
                    else:
                        # print 'link=none'
                        myParent.insert(myIndex, link.contents)
                    self.myKiller.safeRemovePart(link, False)
                else:
                     notshown = 'tag received is empty' # print
          except:
            notshown = 'tag received is empty' # print
            notshown
        return soup

class MerryProcess(BeautifulSoup):
    myKiller = MerryExtract()
    myReplacer = MerryReplace()
    myPrepare = MerryPreProcess()

    def optimizeLayout(self,soup):
        self.myPrepare.optimizePicture(soup)
        return soup

    def insertFacts(self, soup):
        allfacts = soup.findAll('div', {'class':re.compile('^article-box-fact.*$')})
        if allfacts and not allfacts == None:
            allfactsparent = soup.find('div', {'class':re.compile('^article-box-fact.*$')}).parent
            for part in allfactsparent:
                if not part in allfacts:
                    self.myKiller.safeRemovePart(part, True)
        articlefacts = soup.find('div', {'class':'article-box-fact column'})
        if (articlefacts and not articlefacts==None):
          try:
            contenttag = soup.find('div', {'class':'article-body'})
            foundrighttag = False
            if contenttag and not contenttag == None:
                foundrighttag = True
            if foundrighttag == True:
                contenttag.insert(0, allfactsparent)
          except:
              pass
        return soup

    def previousNextSibRemover(self, soup, previous=True, soupIsArray=False):
        findsibsof = soup
        firstpart = previous
        if findsibsof and not findsibsof == None:
            if soupIsArray == True:
                for foundsib in findsibsof:
                    self.previousNextSibRemover(foundsib, firstpart, soupIsArray=False)
            else:
                if firstpart == True and soupIsArray == False:
                    sibs = findsibsof.previousSiblingGenerator()
                else:
                    sibs = findsibsof.nextSiblingGenerator()
                for sib in sibs:
                    self.myKiller.safeRemovePart(sib, True)
        return

    def removeUnwantedTags(self,soup):
        self.removeTagsByName(soup)
        self.insertFacts(soup)
        self.removeFirstAndLastPart(soup)
        self.removeUnwantedParts(soup)
        self.removeEmptyTags(soup)
        self.myReplacer.replaceATag(soup)
        return soup

    def removeUnwantedParts(self, soup):
        self.removeUnwantedTagsByID(soup)
        self.removeUnwantedTagsByClass(soup)
        self.removeUnwantedTagsByStyle(soup)
        return soup

    def removeUnwantedTagsByStyle(self,soup):
        self.removeArrayOfTags(soup.findAll(attrs={'style':re.compile("^(.*(display\s?:\s?none|img-mask|white)\s?;?.*)$")}))
        self.removeArrayOfTags(soup.findAll(attrs={'title':'volledig scherm'}))
        return soup

    def removeArrayOfTags(self,souparray):
        return self.myKiller.safeRemovePart(souparray, True)

    def removeUnwantedTagsByClass(self,soup):
        self.removeArrayOfTags(soup.findAll("div", { "class" :re.compile('^(promo.*?|share-tools-top|share-tools-bottom|article-tools-below-title|metroCommentFormWrap|ad|share-tools|tools|header-links|related-links|padding-top-15|footer-[a-zA-Z0-9]+|column-4-5)$')}))
        return soup

    def removeUnwantedTagsByID(self,soup):
        defaultids = ['footer-extra',re.compile('^ad(\d+|adcomp.*?)?$'),'column-4-5','navigation','header',re.compile('^column-1-5-(top|bottom)$'),'footer','hidden_div','sidebar',re.compile('^article-\d$'),'comments','footer','gallery-1']
        for removeid in defaultids:
            self.removeArrayOfTags(soup.findAll(id=removeid))
        return soup

    # def safeRemoveTag(self, subtree):
        # return self.myKiller.safeRemovePart(subtree, True)


    def removeTagsByName(self, soup):
        self.myKiller.safeRemovePart(soup.script, True)
        self.myKiller.safeRemovePart(soup.iframe, True)
        self.myKiller.safeRemovePart(soup.style, True)
        self.myKiller.safeRemovePart(soup.noscript, True)
        return soup

    def removeEmptyTags(self,soup,run=0):
        emptymatches = re.compile('^(&nbsp;|\s|\n|\r|\t)*$')
        emptytags = soup.findAll(lambda tag: tag.find(True) is None and (tag.string is None or tag.string.strip()=="" or tag.string.strip()==emptymatches) and not tag.isSelfClosing)
        if emptytags and not (emptytags == None or emptytags == []):
            self.removeArrayOfTags(emptytags)
            #recursive in case removing empty tag creates new empty tag
            self.removeEmptyTags(soup, run=run)
        return soup

    def removeFirstAndLastPart(self,soup):
        def findparenttag(lookuptag):
            if lookuptag and not lookuptag == None:
                return lookuptag.findParents()
        findtag = soup.find(id="date")
        self.previousNextSibRemover(findtag, previous=True, soupIsArray=False)
        self.previousNextSibRemover(findparenttag(findtag), previous=True, soupIsArray=True)
        for endtag in [soup.find(id="share-and-byline"), soup.find("div", { "class" : "gallery-text" })]:
            self.previousNextSibRemover(endtag, previous=False, soupIsArray=False)
            self.previousNextSibRemover(findparenttag(endtag), previous=False, soupIsArray=True)
        return soup
