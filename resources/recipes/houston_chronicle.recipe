#!/usr/bin/env python
# vim:fileencoding=UTF-8:ts=4:sw=4:sta:et:sts=4:ai
from calibre.web.feeds.news import BasicNewsRecipe

class HoustonChronicle(BasicNewsRecipe):

    title          = u'The Houston Chronicle'
    description    = 'News from Houston, Texas'
    __author__	   = 'Kovid Goyal and Sujata Raman'
    language       = 'en'
    timefmt        = ' [%a, %d %b, %Y]'
    no_stylesheets = True

    keep_only_tags = [
                        dict(id=['story-head', 'story'])
                     ]

    remove_tags    = [
                        dict(id=['share-module', 'resource-box',
                        'resource-box-header'])
                     ]

    extra_css      = '''
                        h1{font-family :Arial,Helvetica,sans-serif; font-size:large;}
                        h2{font-family :Arial,Helvetica,sans-serif; font-size:medium; color:#666666;}
                        h3{font-family :Arial,Helvetica,sans-serif; font-size:medium; color:#000000;}
                        h4{font-family :Arial,Helvetica,sans-serif; font-size: x-small;}
                        p{font-family :Arial,Helvetica,sans-serif; font-size:x-small;}
                        #story-head h1{font-family :Arial,Helvetica,sans-serif; font-size: xx-large;}
                        #story-head h2{font-family :Arial,Helvetica,sans-serif; font-size: small; color:#000000;}
                        #story-head h3{font-family :Arial,Helvetica,sans-serif; font-size: xx-small;}
                        #story-head h4{font-family :Arial,Helvetica,sans-serif; font-size: xx-small;}
                        #story{font-family :Arial,Helvetica,sans-serif; font-size:xx-small;}
                        #Text-TextSubhed BoldCond PoynterAgateZero h3{color:#444444;font-family :Arial,Helvetica,sans-serif; font-size:small;}
                        .p260x p{font-family :Arial,Helvetica,serif; font-size:x-small;font-style:italic;}
                        .p260x h6{color:#777777;font-family :Arial,Helvetica,sans-serif; font-size:xx-small;}
                     '''


    def parse_index(self):
        soup = self.index_to_soup('http://www.chron.com/news/')
        container = soup.find('table', attrs={'class':'body-columns'})

        feeds = []
        current_section = 'Top Stories'
        current_articles = []

        self.log('\tFound section:', current_section)

        for div in container.findAll('div'):
            if div.get('class', None) == 'module-mast':
                t = self.tag_to_string(div).replace(u'\xbb', '').strip()
                if t and 'interactives' not in t:
                    if current_section and current_articles:
                        feeds.append((current_section, current_articles))
                    current_section = t
                    current_articles = []
                    self.log('\tFound section:', current_section)
            elif div.get('storyid', False):
                a = div.find('a', href=True)
                if a:
                    title = self.tag_to_string(a)
                    url = a.get('href')
                    if title and url:
                        if url.startswith('/'):
                            url = 'http://www.chron.com'+url
                        self.log('\t\tFound article:', title)
                        self.log('\t\t\t', url)
                        current_articles.append({'title':title, 'url':url,
                            'date':'', 'description':''})
            elif div.get('class', None) == 'columnbox' and \
                    'special' in current_section.lower():
                a = div.find('a')
                if a:
                    title = self.tag_to_string(a)
                    url = a.get('href')
                    if title and url:
                        if not url.startswith('/'): continue
                        url = 'http://www.chron.com'+url
                        self.log('\t\tFound article:', title)
                        self.log('\t\t\t', url)
                        a.extract()
                        desc = self.tag_to_string(div)
                        current_articles.append({'title':title, 'url':url,
                            'date':'', 'description':desc})

        if current_section and current_articles:
            feeds.append((current_section, current_articles))
        return feeds




