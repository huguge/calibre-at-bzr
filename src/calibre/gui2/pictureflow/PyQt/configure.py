import os, sys, glob
import sipconfig
if os.environ.get('PYQT4PATH', None):
    print os.environ['PYQT4PATH']
    sys.path.insert(0, os.environ['PYQT4PATH'])
from PyQt4 import pyqtconfig

# The name of the SIP build file generated by SIP and used by the build
# system.
build_file = "pictureflow.sbf"

# Get the PyQt configuration information.
config = pyqtconfig.Configuration()

# Run SIP to generate the code.  Note that we tell SIP where to find the qt
# module's specification files using the -I flag.
sip = [config.sip_bin, "-c", ".", "-b", build_file, "-I",
       config.pyqt_sip_dir, config.pyqt_sip_flags, "../pictureflow.sip"]
os.system(" ".join(sip))



installs=[]

# Create the Makefile.  The QtModuleMakefile class provided by the
# pyqtconfig module takes care of all the extra preprocessor, compiler and
# linker flags needed by the Qt library.
makefile = pyqtconfig.QtGuiModuleMakefile (
    configuration=config,
    build_file=build_file,
    installs=installs,
    qt=1,
)

# Setup the platform dependent Makefile parameters
d = os.path.dirname
if 'darwin' in sys.platform:
    makefile.extra_cflags += ['-arch i386', '-arch ppc']
    makefile.extra_lflags += ['-arch i386', '-arch ppc']
qtdir = os.path.join(d(d(os.getcwd())), '.build')
if 'win32' in sys.platform:
    qtdir = os.path.join(qtdir, 'release')
    makefile.extra_lib_dirs += ['C:/Python25/libs']

# Add the compiled Qt objects
qtobjs = map(lambda x:'"'+x+'"', glob.glob(os.path.join(qtdir, '*.o')))
makefile.extra_lflags += qtobjs
makefile.extra_cxxflags = makefile.extra_cflags

# Generate the Makefile itself.
makefile.generate()


