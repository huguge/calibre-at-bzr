
.. include:: global.rst

.. _pluginstutorial:

Writing your own plugins to extend |app|'s functionality
====================================================================

|app| has a very modular design. Almost all functionality in |app| comes in the form of plugins. Plugins are used for conversion, for downloading news (though these are called recipes), for various components of the user interface, to connect to different devices, to process files when adding them to |app| and so on. You can get a complete list of all the builtin plugins in |app| by going to :guilabel:`Preferences->Plugins`.

Here, we will teach you how to create your own plugins to add new features to |app|.


.. contents:: Contents
  :depth: 2
  :local:

.. note:: This only applies to calibre releases >= 0.7.52

Anatomy of a |app| plugin
---------------------------

A |app| plugin is very simple, it's just a zip file that contains some python code
and any other resources like image files needed by the plugin. Without further ado,
let's see a basic example. 

Suppose you have an installation of |app| that you are using to self publish various e-documents in EPUB and MOBI
formats. You would like all files generated by |app| to have their publisher set as "Hello world", here's how to do it.
Create a file named :file:`__init__.py` (this is a special name and must always be used for the main file of your plugin)
and enter the following Python code into it:

.. literalinclude:: plugin_examples/helloworld/__init__.py
    :lines: 10-

That's all. To add this code to |app| as a plugin, simply create a zip file with::

    zip plugin.zip __init__.py

Add this plugin to |app| via :guilabel:`Preferences->Plugins`.

You can download the Hello World plugin from 
`helloworld_plugin.zip  <http://calibre-ebook.com/downloads/helloworld_plugin.zip>`_. 

Every time you use calibre to convert a book, the plugin's :meth:`run` method will be called and the 
converted book will have its publisher set to "Hello World". This is a trivial plugin, lets move on to
a more complex example that actually adds a component to the user interface.

A User Interface plugin
-------------------------

This plugin will be spread over a couple of files (to keep the code clean). It will show you how to get resources
(images or data files) from the plugin zip file, how to create elements in the |app| user interface and how to access
and query the books database in |app|. 

The different types of plugins
--------------------------------

As you may have noticed above, a plugin in |app| is a class. There are different classes for the different types of plugins in |app|.
Details on each class, including the base class of all plugins can be found in :ref:`plugins`.

